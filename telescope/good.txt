<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>James Webb Space Telescope 3D Model</title>
    <style>
        body { margin: 0; }
        canvas { display: block; }
        #info { position: absolute; top: 10px; left: 10px; color: black; background: rgba(255, 255, 255, 0.7); padding: 10px; border-radius: 5px; }
        video { display: none; } /* Hide the video element */
    </style>
</head>
<body>
    <div id="info">Hover over components for details.</div>
    <video id="background-video" autoplay loop muted playsinline>
        <!-- You can either use a local video file or live feed -->
         <source src="spacev.mp4" type="video/mp4"> 
    </video>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.rawgit.com/mrdoob/three.js/r128/examples/js/loaders/GLTFLoader.js"></script>
    <script src="https://cdn.rawgit.com/mrdoob/three.js/r128/examples/js/controls/OrbitControls.js"></script>
    <script>
        let scene, camera, renderer, controls, videoTexture;

        function init() {
            // Scene
            scene = new THREE.Scene();

            // Get the video element
            const video = document.getElementById('background-video');
            video.play(); 
            

            // Create a video texture
            videoTexture = new THREE.VideoTexture(video);
            videoTexture.minFilter = THREE.LinearFilter;
            videoTexture.magFilter = THREE.LinearFilter;
            videoTexture.format = THREE.RGBFormat;

            // Set video texture as scene background
            scene.background = videoTexture;

            // Camera
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            camera.position.set(0, 0, 10); // Adjust camera position

            // Renderer
            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.outputEncoding = THREE.sRGBEncoding; // Ensures accurate color display

            document.body.appendChild(renderer.domElement);

            // Controls
            controls = new THREE.OrbitControls(camera, renderer.domElement);

            // Load Model
            const loader = new THREE.GLTFLoader();
            loader.load('jwst/scene.gltf', (gltf) => {
                const model = gltf.scene;
                scene.add(model);

                model.traverse((child) => {
                    if (child.isMesh) {
                        child.userData.info = "Sunshield";
                    }
                });
            }, undefined, (error) => {
                console.error('An error happened:', error);
            });

            // Lighting
            const ambientLight = new THREE.AmbientLight(0x808080, 1.0); // Neutral white light
            scene.add(ambientLight);

            const directionalLight = new THREE.DirectionalLight(0xffffff, 1.3); // Directional light
            directionalLight.position.set(5, 5, 5);
            scene.add(directionalLight);

            window.addEventListener('resize', onWindowResize);
            document.addEventListener('pointermove', onPointerMove);

            animate();
        }

        function animate() {
            requestAnimationFrame(animate);
            controls.update();
            renderer.render(scene, camera);
        }

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }

        function onPointerMove(event) {
            const raycaster = new THREE.Raycaster();
            const mouse = new THREE.Vector2();
            mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
            mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
            raycaster.setFromCamera(mouse, camera);

            const intersects = raycaster.intersectObjects(scene.children, true);
            if (intersects.length > 0) {
                const object = intersects[0].object;
                if (object.userData.info) {
                    showInfo(object.userData.info);
                }
            } else {
                hideInfo();
            }
        }

        function showInfo(text) {
            document.getElementById('info').innerText = text;
        }

        function hideInfo() {
            document.getElementById('info').innerText = 'Hover over components for details.';
        }

        init();
    </script>
</body>
</html>
